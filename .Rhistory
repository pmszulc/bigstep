X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5]]
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
expect_equal(pv[2], cor.test(y, X[, 5])$p.v)
})
X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE)
pv
expect_false(is.na(pv[2]))
?matrixStats::colSds
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
library(matrixStats)
colSds(X)
X[5, 5] <- NA
colSds(X)
colSds(X, na.rm = TRUE)
X <- matrix(rnorm(M*n), ncol = M)
library(microbenchmark)
microbenchmark(colSds(X), colSds(X, na.rm = TRUE))
microbenchmark(colSds(X), colSds(X, na.rm = TRUE))
microbenchmark(colSds(X), colSds(X, na.rm = TRUE))
?crossprod
?crossprod
m <- colMeans(X)
sd <- matrixStats::colSds(X, center = m)
m
sd
XX <- t((t(X) - m)/sd)
XX
set.seed(1)
n <- 5
M <- 2
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
m <- colMeans(X)
sd <- matrixStats::colSds(X, center = m)
m
sd
X
XX <- t((t(X) - m)/sd)
XX
sweep(X, m)
?sweep
sweep(X, m, colMeans)
sweep(X, 2, colMeans)
sweep(X, 2, m)
m
means <- colMeans(X)
sds <- matrixStats::colSds(X, center = means)
XX <- t((t(X) - means)/sds)
XX
sweep(sweep(X, 2, means), 2, sds, "/")
microbenchmark(t((t(X) - means)/sds), sweep(sweep(X, 2, means), 2, sds, "/"))
microbenchmark(t((t(X) - means)/sds), sweep(sweep(X, 2, means), 2, sds, "/"))
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
means <- colMeans(X)
sds <- matrixStats::colSds(X, center = means)
XX <- t((t(X) - means)/sds)
sweep(sweep(X, 2, means), 2, sds, "/")
microbenchmark(t((t(X) - means)/sds), sweep(sweep(X, 2, means), 2, sds, "/"))
microbenchmark(t((t(X) - means)/sds), sweep(sweep(X, 2, means), 2, sds, "/"), scale(X))
devtools::load_all(".")
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
test_that("Fast singlePearson", {
expect_equal(pv, cor.test(y, X[, 2])$p.v)
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
}
test_that("Fast singlePearson with NA", {
X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
expect_false(is.na(pv[2]))
expect_equal(pv[2], cor.test(y, X[, 5])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE)
})
test_that("Fast singlePearson", {
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE)[2]
expect_equal(pv, cor.test(y, X[, 2])$p.v)
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
}
test_that("Fast singlePearson", {
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE)[2]
expect_equal(pv, cor.test(y, X[, 2])$p.v)
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
}
test_that("Fast singlePearson", {
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE)[2]
expect_equal(pv, cor.test(y, X[, 2])$p.v)
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
})
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
test_that("Fast singlePearson", {
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE)[2]
expect_equal(pv, cor.test(y, X[, 2])$p.v)
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
})
X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
expect_false(is.na(pv[2]))
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
pv[1]
cor.test(y, X[, 2])$p.v
pv
singlePearson
?cor
devtools::load_all(".")
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
pv
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
singlePearson(X, y, na = TRUE, verbose = FALSE)
devtools::load_all(".")
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
pv
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
expect_equal(singlePearson(X, y, na = FALSE, verbose = FALSE),
singlePearson(X, y, na = TRUE, verbose = FALSE))
singlePearson(X, y, na = TRUE, verbose = FALSE)
X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
expect_false(is.na(pv[2]))
expect_equal(pv[2], cor.test(y, X[, 5])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE)
X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
expect_false(is.na(pv[2]))
expect_equal(pv[2], cor.test(y, X[, 5])$p.v)
pv
cor.test(y, X[, 5])
expect_equal(pv[2], cor.test(y, X[, 5])$p.v)
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
expect_false(is.na(pv[2]))
expect_equal(pv[2], cor.test(y, X[, 5])$p.v)
?cor.test
singlePearson(X, y, na = TRUE, verbose = FALSE)
?cor
devtools::load_all(".")
singlePearson(X, y, na = TRUE, verbose = FALSE)
m <- colMeans(XX, na.rm = TRUE)
sd <- matrixStats::colSds(XX, center = m, na.rm = TRUE)
m
sd
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
X[5, 5] <- NA
m <- colMeans(XX, na.rm = TRUE)
sd <- matrixStats::colSds(XX, center = m, na.rm = TRUE)
m
sd
colSds(XX, center = m, na.rm = TRUE)
colSds(XX, center = m)
XX
sd(XX)
sd(XX[,1])
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
sd(X, 1)
XX=X
sd(X[, 1])
sd(XX, 1])
sd(XX[, 1])
m <- colMeans(XX, na.rm = TRUE)
m
sd(XX[,1])
sds <- matrixStats::colSds(XX, center = m, na.rm = TRUE)
sd(XX[,1])
sds
XX <- t((t(XX) - m)/sds)
XX
i=1
sum(y * XX[, i], na.rm = TRUE)
devtools::load_all(".")
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
pv
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
expect_false(is.na(pv[2]))
expect_equal(pv[2], cor.test(y, X[, 5])$p.v)
(y * XX[, i]
)
RcppEigen::fastLmPure(X[,1], y)
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
RcppEigen::fastLmPure(X[,1], y)
RcppEigen::fastLmPure(X[,1,drop=F], y)
RcppEigen::fastLmPure(X[,1,drop=F], y)$coff
RcppEigen::fastLmPure(X[,1,drop=F], y)$coeff
microbenchmark(RcppEigen::fastLmPure(X[,1,drop=F], y)$coeff, cor(X[,1], y)
)
microbenchmark(RcppEigen::fastLmPure(X[,1,drop=F], y)$coeff, cor(X[,1], y), crossprod(X[,1], y))
devtools::load_all(".")
context("Single tests")
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
test_that("Fast singlePearson", {
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE)[2]
expect_equal(pv, cor.test(y, X[, 2])$p.v)
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
expect_equal(singlePearson(X, y, na = FALSE, verbose = FALSE),
singlePearson(X, y, na = TRUE, verbose = FALSE))
})
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE)[2]
expect_equal(pv, cor.test(y, X[, 2])$p.v)
pv
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
expect_equal(singlePearson(X, y, na = FALSE, verbose = FALSE),
singlePearson(X, y, na = TRUE, verbose = FALSE))
singlePearson(X, y, na = TRUE, verbose = FALSE)
devtools::load_all(".")
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
test_that("Fast singlePearson", {
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE)[2]
expect_equal(pv, cor.test(y, X[, 2])$p.v)
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
expect_equal(singlePearson(X, y, na = FALSE, verbose = FALSE),
singlePearson(X, y, na = TRUE, verbose = FALSE))
})
X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
pv
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
expect_false(is.na(pv[2]))
expect_equal(pv[2], cor.test(y, X[, 5])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE)
library(microbenchmark)
devtools::load_all(".")
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
library(testthat)
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE)[2]
expect_equal(pv, cor.test(y, X[, 2])$p.v)
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
expect_equal(singlePearson(X, y, na = FALSE, verbose = FALSE),
singlePearson(X, y, na = TRUE, verbose = FALSE))
X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
expect_false(is.na(pv[2]))
expect_equal(pv[2], cor.test(y, X[, 5])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE)[5]
expect_equal(pv, cor.test(y, X[, 5])$p.v)
y[9] <- NA
pv <- singlePearson(X, y, na = NULL, verbose = FALSE)[5]
expect_equal(pv, cor.test(y, X[, 5])$p.v)
pv
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
expect_false(is.na(pv[2]))
expect_equal(pv[2], cor.test(y, X[, 5])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE)[5]
expect_equal(pv, cor.test(y, X[, 5])$p.v)
pv
y[9] <- NA
pv <- singlePearson(X, y, na = NULL, verbose = FALSE)[5]
expect_equal(pv, cor.test(y, X[, 5])$p.v)
pv
cor.test(y, X[, 5])$p.v
system.time(singlePearson(X, y, na = NULL, verbose = FALSE))
singlePearson(X, y, na = TRUE, verbose = FALSE)
system.time(for(i in 1:1e3) singlePearson(X, y, na = TRUE, verbose = FALSE)
)
singlePearson(X, y, na = TRUE, verbose = FALSE)
system.time(for(i in 1:1e3) singlePearson(X, y, na = TRUE, verbose = FALSE)
)
system.time(for(i in 1:1e3) singlePearson(X, y, na = TRUE, verbose = FALSE))
devtools::load_all(".")
system.time(for(i in 1:1e3) singlePearson(X, y, na = TRUE, verbose = FALSE))
x <- sample(0:1, 1e5, rep = T)
microbenchmark(which(x > 0), x > 0)
microbenchmark(x[which(x > 0)], x[x > 0])
microbenchmark(x[which(x > 0)], x[x > 0])
microbenchmark(x[which(x > 0)], x[x > 0])
microbenchmark(x[which(x > 0)], x[x > 0])
microbenchmark(length(which(x > 0)), sum(x > 0))
microbenchmark(length(which(x > 0)), sum(x > 0))
devtools::load_all(".")
system.time(for(i in 1:1e3) singlePearson(X, y, na = TRUE, verbose = FALSE))
warnings()
debugonce(singlePearson)
system.time(for(i in 1:1e3) singlePearson(X, y, na = TRUE, verbose = FALSE))
nn
means
sds
XX
X_na
XX <- as.matrix(X[!y_na, vars])
means <- colMeans(XX, na.rm = TRUE)
r
print(n)
r
print(n)
r
t
warnings()
X[1,1] = NA
debugonce(singlePearson)
system.time(for(i in 1:1e3) singlePearson(X, y, na = TRUE, verbose = FALSE))
means
sds
X_na
r
print(n)
r
print(n)
r
length(r)
length(n)
print(nn)
print(n)
r
devtools::load_all(".")
test_that("Fast singlePearson with NA", {
X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
expect_false(is.na(pv[2]))
expect_equal(pv[2], cor.test(y, X[, 5])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE)[5]
expect_equal(pv, cor.test(y, X[, 5])$p.v)
y[9] <- NA
pv <- singlePearson(X, y, na, verbose = FALSE)[5]
expect_equal(pv, cor.test(y, X[, 5])$p.v)
})
test_that("Fast singlePearson with NA", {
X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
expect_false(is.na(pv[2]))
expect_equal(pv[2], cor.test(y, X[, 5])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE)[5]
expect_equal(pv, cor.test(y, X[, 5])$p.v)
y[9] <- NA
pv <- singlePearson(X, y, verbose = FALSE)[5]
expect_equal(pv, cor.test(y, X[, 5])$p.v)
})
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
microbenchmark(singlePearson(X, y, na = TRUE, verbose = F), singlePearson(X, y, na = FALSE, verbose = F))
install.packages("devtools")
install.packages("roxygen2")
devtools::load_all(".")
context("Single tests")
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
test_that("Fast singlePearson", {
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE)[2]
expect_equal(pv, cor.test(y, X[, 2])$p.v)
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
expect_equal(singlePearson(X, y, na = FALSE, verbose = FALSE),
singlePearson(X, y, na = TRUE, verbose = FALSE))
})
library(testthat)
test_that("Fast singlePearson", {
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE)[2]
expect_equal(pv, cor.test(y, X[, 2])$p.v)
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
expect_equal(singlePearson(X, y, na = FALSE, verbose = FALSE),
singlePearson(X, y, na = TRUE, verbose = FALSE))
})
test_that("Fast singlePearson with NA", {
X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
expect_false(is.na(pv[2]))
expect_equal(pv[2], cor.test(y, X[, 5])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE)[5]
expect_equal(pv, cor.test(y, X[, 5])$p.v)
y[9] <- NA
pv <- singlePearson(X, y, verbose = FALSE)[5]
expect_equal(pv, cor.test(y, X[, 5])$p.v)
})
set.seed(1)
n <- 100
M <- 20
X <- matrix(rnorm(M*n), ncol = M)
y <- X[, 1] - 0.5*X[, 2] + rnorm(n)
test_that("Fast singlePearson", {
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE)[2]
expect_equal(pv, cor.test(y, X[, 2])$p.v)
pv <- singlePearson(X, y, na = FALSE, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE, maxp = 200)[1]
expect_equal(pv, cor.test(y, X[, 1])$p.v)
expect_equal(singlePearson(X, y, na = FALSE, verbose = FALSE),
singlePearson(X, y, na = TRUE, verbose = FALSE))
})
test_that("singlePearson with NA", {
X[5, 5] <- NA
pv <- singlePearson(X, y, na = TRUE, verbose = FALSE)[c(2, 5)]
expect_equal(pv[1], cor.test(y, X[, 2])$p.v)
expect_false(is.na(pv[2]))
expect_equal(pv[2], cor.test(y, X[, 5])$p.v)
pv <- singlePearson(X, y, na = NULL, verbose = FALSE)[5]
expect_equal(pv, cor.test(y, X[, 5])$p.v)
y[9] <- NA
pv <- singlePearson(X, y, verbose = FALSE)[5]
expect_equal(pv, cor.test(y, X[, 5])$p.v)
})
y
pv <- singleLRT(X, y, verbose = FALSE)[2]
pv
m1 <- lm(y ~ 1)
m2 <- lm(y ~ X[, 2])
anova(m1, m2)
anova(m1, m2)$p.v
str(anova(m1, m2))
anova(m1, m2)$Pr
anova(m1, m2)$Pr[2]
pv
lm(y ~ X[, 2])
